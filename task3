import tkinter as tk
import random
import string
class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        self.create_widgets()
    def create_widgets(self):
      
        tk.Label(self.root, text="Password Length:").grid(row=0, column=0, padx=10, pady=10)
        self.length_entry = tk.Entry(self.root)
        self.length_entry.grid(row=0, column=1, padx=10, pady=10)
        self.use_uppercase = tk.BooleanVar(value=True)
        tk.Checkbutton(self.root, text="Include Uppercase Letters", variable=self.use_uppercase).grid(row=1, column=0, columnspan=2, padx=10, pady=5)
        self.use_digits = tk.BooleanVar(value=True)
        tk.Checkbutton(self.root, text="Include Digits", variable=self.use_digits).grid(row=2, column=0, columnspan=2, padx=10, pady=5)
        self.use_special_chars = tk.BooleanVar(value=True)
        tk.Checkbutton(self.root, text="Include Special Characters", variable=self.use_special_chars).grid(row=3, column=0, columnspan=2, padx=10, pady=5)
        self.generate_button = tk.Button(self.root, text="Generate Password", command=self.generate_password)
        self.generate_button.grid(row=4, column=0, columnspan=2, pady=10)
        self.result_label = tk.Label(self.root, text="", font=('Arial', 14))
        self.result_label.grid(row=5, column=0, columnspan=2, padx=10, pady=10)
    def generate_password(self):
        try:
            length = int(self.length_entry.get())
            if length <= 0:
                raise ValueError("Length must be a positive integer.")
        except ValueError as ve:
            self.result_label.config(text=f"Error: {ve}")
            return
        lowercase_chars = string.ascii_lowercase
        uppercase_chars = string.ascii_uppercase if self.use_uppercase.get() else ''
        digits = string.digits if self.use_digits.get() else ''
        special_chars = string.punctuation if self.use_special_chars.get() else ''
        all_chars = lowercase_chars + uppercase_chars + digits + special_chars
        if not all_chars:
            self.result_label.config(text="Error: No character sets selected.")
            return
        password = ''.join(random.choice(all_chars) for _ in range(length))
        self.result_label.config(text=f"Generated Password: {password}")
if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
